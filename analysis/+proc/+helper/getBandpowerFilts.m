function varargout = getBandpowerFilts(varargin)
assert(nargout>=1,'Must request at least one output');

% process inputs
[varargin,freqband] = util.argkeyval('freqband',varargin,{[12 30],[30 80],[80 200]});
[varargin,movingwin,~,found_movingwin] = util.argkeyval('movingwin',varargin,[1 0.5]);
[varargin,fs,~,found_fs] = util.argkeyval('fs',varargin,nan);
assert(found_fs,'Must provide sampling rate');
util.argempty(varargin);

% produce bandpass filters
nband = length(freqband);
bpfilt = cell(1,nband);
for bb=1:nband
    if freqband{bb}(1)>0 && freqband{bb}(2)<(fs/2)
        
        % frequency band wholly contained within (0,fs/2) - construct a
        % bandpass filter
        bpfilt{bb} = designfilt('bandpassiir',...
            'DesignMethod','ellip',...
            'StopbandFrequency1',max(eps,min(freqband{bb}(1)-1,floor(0.9*freqband{bb}(1)))),...
            'PassbandFrequency1',freqband{bb}(1),...
            'PassbandFrequency2',freqband{bb}(2),...
            'StopbandFrequency2',max(freqband{bb}(2)+1,ceil(1.1*freqband{bb}(2))),...
            'StopbandAttenuation1',40,...
            'PassbandRipple',0.01,...
            'StopbandAttenuation2',40,...
            'SampleRate',fs);
    elseif freqband{bb}(1)>0
        
        % frequency band is in the range (0,fs/2] - build a highpass filter
        bpfilt{bb} = designfilt('highpassiir',...
            'DesignMethod','ellip',...
            'StopbandFrequency',max(eps,min(freqband{bb}(1)-1,floor(0.9*freqband{bb}(1)))),...
            'PassbandFrequency',freqband{bb}(1),...
            'StopbandAttenuation',40,...
            'PassbandRipple',0.01,...
            'SampleRate',fs);
    elseif freqband{bb}(2)<(fs/2)
        
        % frequency band is in the range [0,fs/2) - build a lowpass filter
        bpfilt{bb} = designfilt('lowpassiir',...
            'DesignMethod','ellip',...
            'PassbandFrequency',freqband{bb}(2),...
            'StopbandFrequency',max(freqband{bb}(2)+1,ceil(1.1*freqband{bb}(2))),...
            'StopbandAttenuation',40,...
            'PassbandRipple',0.01,...
            'SampleRate',fs);
    else
        
        % frequency band spans entire range [0,fs/2] or more - no filter
        bpfilt{bb} = nan;
    end
end

% produce lowpass filter for bandpower computation
if found_movingwin
    lpfilt = designfilt('lowpassiir',...
        'FilterOrder',4,...
        'HalfPowerFrequency',2/movingwin(1),...
        'SampleRate',fs);
end

% assign outputs
if ~found_movingwin
    varargout = {bpfilt};
else
    varargout = {bpfilt,lpfilt};
end