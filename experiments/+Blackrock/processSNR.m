function [numUnits,channels,units,snr,electrodes] = processSNR(snrFile,varargin)
% BLACKROCK.PROCESSSNR read and summarize unit sorting information from SNR
% files.
%
%   This function reads data about sorted units from text files generated 
%   by Central SNR tool (Blackrock Microsystems, Salt Lake City, UT).  Note
%   that GMMSpikeSorter also outputs text files in this same format.
%
%   SNR files generated by Central SNR always use channel numbers, even 
%   when the labels have been renamed to elec##.
%
%   [NUMUNITS,CHANNELS,UNITS,SNR] = PROCESSSNR(SNRFILE)
%   Read unit information from SNRFILE and return the number of sorted
%   units in NUMUNITS, CHANNELS and UNITS listing the channel and unit
%   number for each of the sorted units, and the the signal-to-noise ratio
%   SNR of each sorted unit.
%
%   PROCESSIMPEDNACE(...,FILEPATH)
%   PROCESSIMPEDANCE(...,ARRAYMAP)
%   Specify an array map either by providing a path to the CMP file or by
%   providing the Blackrock.ArrayMap object directly.
%
%   [NUMUNITS,CHANNELS,UNITS,SNR,ELECTRODES] = PROCESSSNR(SNRFILE)
%   Returns the electrode number of each sorted unit.  In order to
%   translate channel numbers into electrode numbers, an array map must be
%   available.
%
%   PROCESSSNR(...,'CHANNEL')
%   PROCESSSNR(...,'ELECTRODE')
%   Return units sorted by CHANNEL (default) or ELECTRODE.
%
%   See also BLACKROCK.ARRAYMAP.

% process user inputs
[varargin,SortBy] = util.ProcVarargin(varargin,{'CHANNEL','ELECTRODE'},'CHANNEL',2);
[varargin,hArray] = util.ProcVarargin(varargin,@(x)isa(x,'Blackrock.ArrayMap'),[]);
if isempty(hArray)
    [varargin,hArrayFile] = util.ProcVarargin(varargin,@(x)ischar(x)&&strcmpi(x(end-min(length(x)-1,3):end),'.cmp'),'');
    if ~isempty(hArrayFile), hArray = Blackrock.ArrayMap(hArrayFile); end
end
util.ProcVarargin(varargin);

% check that file exists
assert(exist(snrFile,'file')==2,'File does not exist: %s\n',snrFile);

% read in file
fid = fopen(snrFile); % open the file
filedata = textscan(fid,'%d %d %d %d %f %f %s','HeaderLines',10); % read info
fclose(fid); % close file

% basic information
channels = filedata{1};
units = filedata{2};
snr = filedata{6};

% generate electrode numbers or nans
electrodes = nan(size(channels));
if ~isempty(hArray), electrodes = hArray.ch2el(channels); end

% sort by channel (priority) or electrode
switch lower(SortBy)
    case 'channel'
        [channels,sortIdx] = sort(channels);
        electrodes = electrodes(sortIdx);
    case 'electrode'
        assert(all(~isnan(electrodes)),'Cannot sort by electrodes without map file.');
        [electrodes,sortIdx] = sort(electrodes);
        channels = channels(sortIdx);
    otherwise
        error('unknown sort method ''%s'' (should be ''channel'' or ''electrode'')');
end
units = units(sortIdx);
snr = snr(sortIdx);

% count number of units
numUnits = size(units,1);