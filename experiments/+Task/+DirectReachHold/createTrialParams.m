function params = createTrialParams(user)

%show when components are run
%fprintf('createTrialParams has been called\n')

conditionsToDistribute = {'targetlocationnames','targetcolornames','targetbrightness'}; % fields that contain values to be distributed
numValuesPerCondition = cellfun(@(x)length(user.(x)),conditionsToDistribute); % number of elements in each field that need to be distributed
conditionsToBalance = cellfun(@lower,user.balance,'UniformOutput',false); % fields that should have balanced distribution
assert(all(ismember(conditionsToBalance,conditionsToDistribute)),'Balance conditions must be present in the set of conditions to distribute');
whetherToBalance = ismember(conditionsToDistribute,conditionsToBalance);
% [tgtID,clrID,brtID] = Task.Common.balanceTrials(whetherToBalance,numValuesPerCondition,user.numTrialsPerBalanceCondition);
% % numTrialsTotal = length(tgtID);
% 
% 
% % create array of structs (cell arrays args dealt across array) all must be
% % cell arrays of the same dimensions
% params = struct(...
%     'targetName',user.targetlocationnames(tgtID),...
%     'targetID',cellfun(@(x)str2double(regexprep(x,'^target(\d+)$','$1')),user.targetlocationnames(tgtID),'UniformOutput',false),...
%     'target',arrayfun(@(x)user.targetlocations(x,:),tgtID,'UniformOutput',false),...
%     'colorName',user.targetcolornames(clrID),...
%     'color',arrayfun(@(x)user.targetcolors(x,:),clrID,'UniformOutput',false),...
%     'brightness',arrayfun(@(x)user.targetbrightness(x),brtID,'UniformOutput',false));



for trial = 1:user.numTrialsPerBalanceCondition
    
    [tgtID,clrID,brtID] = Task.Common.balanceTrials(whetherToBalance,numValuesPerCondition,1);
    
    if trial == 1
    
        % create array of structs (cell arrays args dealt across array) all must be
        % cell arrays of the same dimensions
        params = struct(...
            'targetName',user.targetlocationnames(tgtID),...
            'targetID',cellfun(@(x)str2double(regexprep(x,'^target(\d+)$','$1')),user.targetlocationnames(tgtID),'UniformOutput',false),...
            'target',arrayfun(@(x)user.targetlocations(x,:),tgtID,'UniformOutput',false),...
            'colorName',user.targetcolornames(clrID),...
            'color',arrayfun(@(x)user.targetcolors(x,:),clrID,'UniformOutput',false),...
            'brightness',arrayfun(@(x)user.targetbrightness(x),brtID,'UniformOutput',false));
    
    elseif trial > 1
        
        %make next structure of target parameters
        nextParams = struct(...
            'targetName',user.targetlocationnames(tgtID),...
            'targetID',cellfun(@(x)str2double(regexprep(x,'^target(\d+)$','$1')),user.targetlocationnames(tgtID),'UniformOutput',false),...
            'target',arrayfun(@(x)user.targetlocations(x,:),tgtID,'UniformOutput',false),...
            'colorName',user.targetcolornames(clrID),...
            'color',arrayfun(@(x)user.targetcolors(x,:),clrID,'UniformOutput',false),...
            'brightness',arrayfun(@(x)user.targetbrightness(x),brtID,'UniformOutput',false));
        
        %add additional structure to end of previous
        params(end+1:end+length(nextParams)) = nextParams;
    
    end % end if loop for struct setup
    
end %end trial loop