function gui(this)

% get a list of video adaptors
videoAdaptorInfo = imaqhwinfo;
assert(~isempty(videoAdaptorInfo.InstalledAdaptors),'Could not find any installed image acquisition hardware');
videoAdaptorList = videoAdaptorInfo.InstalledAdaptors;

% get a list of audio devices with input capability
list = audiodevinfo;
audioDeviceList = {list.input.Name};
tokens = regexp(audioDeviceList,'(.*) \(.*\)$','tokens');
for kk=1:length(audioDeviceList)
    if iscell(tokens{kk}) && ~isempty(tokens{kk})
        audioDeviceList{kk} = tokens{kk}{1}{1};
    end
end

% widths of the GUI config area elements
column1Width = 75; % generally, the text fields
column2Width = 85; % generally, the edit boxes
column3Width = 65; % generally, apply buttons

% default size of GUI elements and spacing
guiInnerMargin = 15;
defaultMargin = 5;
defaultRowHeight = 22;
defaultTextHeight = defaultRowHeight - 8;
numRows = 10;
headerHeight = 50;
headerBottomMargin = 15;

% width and height of the GUI based on content and default settings
guiWidth = guiInnerMargin + column1Width + defaultMargin + column2Width + defaultMargin + column3Width + guiInnerMargin;
guiHeight = 2*guiInnerMargin + numRows*defaultRowHeight + (numRows-1)*defaultMargin + (headerHeight+headerBottomMargin);

% create the main figure
this.hGUI = figure(...
    'Units','pixels',...
    'Color',[0.94 0.94 0.94],...
    'IntegerHandle','off',...
    'MenuBar','none',...
    'Name',this.guiName,...
    'NumberTitle','off',...
    'PaperPosition',get(0,'defaultfigurePaperPosition'),...
    'Position',[100 100 guiWidth guiHeight],...
    'Resize','off',...
    'UserData',[],...
    'Tag','fh',...
    'CloseRequestFcn',@(h,evt)closeRequestFcn);


% GUI elements created from the bottom up

% -------------- %
% ---  BODY  --- %
% -------------- %

% file text/edit fields
currLeft = guiInnerMargin;
currBottom = guiInnerMargin;
currWidth = column1Width;
textFile = uicontrol(...
    'Parent',this.hGUI,...
    'HorizontalAlignment','left',...
    'Position',[currLeft currBottom+2 currWidth defaultTextHeight],...
    'String','File: ',...
    'Style','text');
currLeft = currLeft + column1Width + defaultMargin;
currWidth = column2Width + defaultMargin + column3Width;
editFile = uicontrol(...
    'Parent',this.hGUI,...
    'BackgroundColor',[1 1 1],...
    'HorizontalAlignment','left',...
    'Position',[currLeft currBottom currWidth defaultRowHeight],...
    'String','',...
    'Style','edit',...
    'Enable','off',...
    'Tag','editFile');

% path text/edit fields
currLeft = guiInnerMargin;
currBottom = currBottom + defaultRowHeight + defaultMargin;
currWidth = column1Width;
textPath = uicontrol(...
    'Parent',this.hGUI,...
    'HorizontalAlignment','left',...
    'Position',[currLeft currBottom+2 currWidth defaultTextHeight],...
    'String','Path: ',...
    'Style','text');
currLeft = currLeft + currWidth + defaultMargin;
currWidth = column2Width + defaultMargin + column3Width;
editPath = uicontrol(...
    'Parent',this.hGUI,...
    'BackgroundColor',[1 1 1],...
    'HorizontalAlignment','left',...
    'Position',[currLeft currBottom currWidth defaultRowHeight],...
    'String',this.savePath,...
    'Style','edit',...
    'Enable','off',...
    'Tag','editPath');

% video frame rate text/edit fields
currLeft = guiInnerMargin;
currBottom = currBottom + defaultRowHeight + defaultMargin;
currWidth = column1Width;
textVideoFrameRate = uicontrol(...
    'Parent',this.hGUI,...
    'HorizontalAlignment','left',...
    'Position',[currLeft currBottom+2 currWidth defaultTextHeight],...
    'String','Video FR: ',...
    'Style','text');
currLeft = currLeft + currWidth + defaultMargin;
currWidth = column2Width;
editVideoFrameRate = uicontrol(...
    'Parent',this.hGUI,...
    'BackgroundColor',[1 1 1],...
    'HorizontalAlignment','right',...
    'Position',[currLeft currBottom currWidth defaultRowHeight],...
    'String',this.videoFrameRate,...
    'Style','edit',...
    'Enable','on',...
    'Tag','editVideoFrameRate',...
    'Callback',@(h,evt)editVideoFrameRate_Callback,...
    'KeypressFcn',@(h,evt)editVideoFrameRate_KeypressFcn(evt));
currLeft = currLeft + currWidth + defaultMargin;
currWidth = column3Width;
buttonApplyVideoFrameRate = uicontrol(...
    'Parent',this.hGUI,...
    'Position',[currLeft currBottom currWidth defaultRowHeight],...
    'String','Apply',...
    'Style','pushbutton',...
    'Enable','off',...
    'Tag','buttonApplyVideoFrameRate',...
    'Callback',@(h,evt)buttonApplyVideoFrameRate_Callback);

% video format text/edit fields
currLeft = guiInnerMargin;
currBottom = currBottom + defaultRowHeight + defaultMargin;
currWidth = column1Width;
textVideoFormat = uicontrol(...
    'Parent',this.hGUI,...
    'HorizontalAlignment','left',...
    'Position',[currLeft currBottom+2 currWidth defaultTextHeight],...
    'String','Video Format: ',...
    'Style','text');
currLeft = currLeft + currWidth + defaultMargin;
currWidth = column2Width + defaultMargin + column3Width;
popupVideoFormat = uicontrol(...
    'Parent',this.hGUI,...
    'Position',[currLeft currBottom currWidth defaultRowHeight],...
    'String','Select Format',...
    'Style','popupmenu',...
    'Tag','popupVideoFormat',...
    'Callback',@(h,evt)popupVideoFormat_Callback);

% video device ID text/edit fields
currLeft = guiInnerMargin;
currBottom = currBottom + defaultRowHeight + defaultMargin;
currWidth = column1Width;
textVideoDeviceID = uicontrol(...
    'Parent',this.hGUI,...
    'HorizontalAlignment','left',...
    'Position',[currLeft currBottom+2 currWidth defaultTextHeight],...
    'String','Video Device: ',...
    'Style','text');
currLeft = currLeft + column1Width + defaultMargin;
currWidth = column2Width + defaultMargin + column3Width;
popupVideoDeviceID = uicontrol(...
    'Parent',this.hGUI,...
    'Position',[currLeft currBottom currWidth defaultRowHeight],...
    'String','Select Device',...
    'Style','popupmenu',...
    'Tag','popupVideoDeviceID',...
    'Callback',@(h,evt)popupVideoDeviceID_Callback);

% adaptor text/edit fields
currLeft = guiInnerMargin;
currBottom = currBottom + defaultRowHeight + defaultMargin;
currWidth = column1Width;
textVideoAdaptor = uicontrol(...
    'Parent',this.hGUI,...
    'HorizontalAlignment','left',...
    'Position',[currLeft currBottom+2 currWidth defaultTextHeight],...
    'String','Video Adaptor: ',...
    'Style','text');
currLeft = currLeft + column1Width + defaultMargin;
currWidth = column2Width + defaultMargin + column3Width;
popupVideoAdaptor = uicontrol(...
    'Parent',this.hGUI,...
    'Position',[currLeft currBottom currWidth defaultRowHeight],...
    'String',videoAdaptorList,...
    'Style','popupmenu',...
    'Tag','popupVideoAdaptor',...
    'Callback',@(h,evt)popupVideoAdaptor_Callback);

% audio sample rate text/edit fields
currLeft = guiInnerMargin;
currBottom = currBottom + defaultRowHeight + defaultMargin;
currWidth = column1Width;
textAudioSampleRate = uicontrol(...
    'Parent',this.hGUI,...
    'HorizontalAlignment','left',...
    'Position',[currLeft currBottom+2 currWidth defaultTextHeight],...
    'String','Audio Fs: ',...
    'Style','text');
currLeft = currLeft + column1Width + defaultMargin;
currWidth = column2Width;
editAudioSampleRate = uicontrol(...
    'Parent',this.hGUI,...
    'BackgroundColor',[1 1 1],...
    'HorizontalAlignment','right',...
    'Position',[currLeft currBottom currWidth defaultRowHeight],...
    'Style','edit',...
    'Tag','editAudioSampleRate',...
    'Callback',@(h,evt)editAudioSampleRate_Callback,...
    'KeypressFcn',@(h,evt)editAudioSampleRate_KeypressFcn(evt));
currLeft = currLeft + currWidth + defaultMargin;
currWidth = column3Width;
buttonApplyAudioSampleRate = uicontrol(...
    'Parent',this.hGUI,...
    'Position',[currLeft currBottom currWidth defaultRowHeight],...
    'String','Apply',...
    'Style','pushbutton',...
    'Enable','off',...
    'Tag','buttonApplyAudioSampleRate',...
    'Callback',@(h,evt)buttonApplyAudioSampleRate_Callback);

% audio device text/edit fields
currLeft = guiInnerMargin;
currBottom = currBottom + defaultRowHeight + defaultMargin;
currWidth = column1Width;
textAudioDevice = uicontrol(...
    'Parent',this.hGUI,...
    'HorizontalAlignment','left',...
    'Position',[currLeft currBottom+2 currWidth defaultTextHeight],...
    'String','Audio Device: ',...
    'Style','text');
currLeft = currLeft + column1Width + defaultMargin;
currWidth = column2Width + defaultMargin + column3Width;
popupAudioDevice = uicontrol(...
    'Parent',this.hGUI,...
    'Position',[currLeft currBottom currWidth defaultRowHeight],...
    'String',audioDeviceList,...
    'Style','popupmenu',...
    'Tag','popupAudioDevice',...
    'Callback',@(h,evt)popupAudioDevice_Callback);


% -------------- %
% --- HEADER --- %
% -------------- %

% queue overrun
currBottom = currBottom + defaultRowHeight + headerBottomMargin;
currWidth = column1Width;
currLeft = guiInnerMargin;
textQueueOverrun = uicontrol(...
    'Parent',this.hGUI,...
    'HorizontalAlignment','left',...
    'Position',[currLeft currBottom+2 currWidth defaultTextHeight],...
    'String','Overrun: ',...
    'Style','text');
currLeft = currLeft + currWidth + defaultMargin;
currWidth = column2Width + defaultMargin + column3Width;
editQueueOverrun = uicontrol(...
    'Parent',this.hGUI,...
    'BackgroundColor',[1 1 1],...
    'HorizontalAlignment','right',...
    'Position',[currLeft currBottom currWidth defaultRowHeight],...
    'Style','edit',...
    'String',sprintf('%4d (inst) %4d (avg)',0,0),...
    'Tag','editQueueOverrun',...
    'Enable','off');

% live update button
currLeft = guiInnerMargin;
currWidth = column1Width;
currBottom = currBottom + defaultRowHeight + defaultMargin;
toggleLiveUpdate = uicontrol(...
    'Parent',this.hGUI,...
    'HorizontalAlignment','left',...
    'Position',[currLeft currBottom currWidth defaultRowHeight],...
    'String','Live Video',...
    'Style','togglebutton',...
    'Value',this.videoLiveUpdate,...
    'Tag','toggleLiveUpdate',...
    'Callback',@(h,evt)toggleLiveUpdate_Callback);
if this.videoLiveUpdate
    set(toggleLiveUpdate,'BackgroundColor',[0 1 0]);
else
    set(toggleLiveUpdate,'BackgroundColor',[0.5 0.5 0.5]);
end

% number of frames text/edit fields
currWidth = column2Width + defaultMargin + column3Width;
currLeft = guiWidth - guiInnerMargin - currWidth;
editStatus = uicontrol(...
    'Parent',this.hGUI,...
    'BackgroundColor',[1 1 1],...
    'HorizontalAlignment','right',...
    'Position',[currLeft currBottom currWidth defaultRowHeight],...
    'Style','edit',...
    'String',sprintf('%4d frames @ %2.2ffps ',0,0),...
    'Tag','editStatus',...
    'Enable','off');

% record button
currHeight = headerHeight;
currWidth = column1Width + defaultMargin + column2Width + defaultMargin + column3Width;
currLeft = guiInnerMargin;
currBottom = currBottom + defaultRowHeight + defaultMargin;
toggleRecord = uicontrol(...
    'Parent',this.hGUI,...
    'Position',[currLeft currBottom currWidth currHeight],...
    'BackgroundColor',[0.5 0.5 0.5],...
    'String','Start Recording',...
    'FontSize',14,...
    'FontWeight','bold',...
    'Style','togglebutton',...
    'Tag','toggleRecord',...
    'Callback',@(h,evt)toggleRecord_Callback);

% create the axis for the frame grab
currLeft = currLeft + currWidth + guiInnerMargin;
currBottom = guiInnerMargin;
axisPicture = axes(...
    'Parent',this.hGUI,...
    'Units','pixels',...
    'Position',[currLeft currBottom 1 guiHeight-2*guiInnerMargin],...
    'Tag','axisPicture');
axis(axisPicture,'off');

% get handles once here so we don't have to in the future
this.guiHandles = guihandles(this.hGUI);

% set the video adaptor, run the callback
aidx = find(strcmpi(videoAdaptorList,this.videoAdaptorName));
if isempty(aidx)
    warning('Unknown video adaptor "%s"\n',this.videoAdaptorName);
    aidx = length(videoAdaptorList);
end
set(this.guiHandles.popupVideoAdaptor,'Value',aidx);
popupVideoAdaptor_Callback;

% set the video device, run the callback
if this.videoDeviceID == 0 || this.videoDeviceID > length(get(this.guiHandles.popupVideoDeviceID,'String'))
    warning('Unknown device ''%d''\n',this.videoDeviceID);
    this.videoDeviceID = 1;
end
set(this.guiHandles.popupVideoDeviceID,'Value',this.videoDeviceID);
popupVideoDeviceID_Callback;

% set the video format, run the callback
di = imaqhwinfo(videoAdaptorList{aidx});
videoFormatList = di.DeviceInfo(this.videoDeviceID).SupportedFormats;
vidx = find(strcmpi(videoFormatList,this.videoFormat));
if isempty(vidx)
    warning('Unknown video format ''%s''\n',this.videoFormat);
    vidx = 1;
    this.videoFormat = videoFormatList(vidx);
end
set(this.guiHandles.popupVideoFormat,'Value',vidx);
popupVideoFormat_Callback;

% set the audio device name, run the callback
adidx = find(strcmpi(audioDeviceList,this.audioDeviceName));
if isempty(adidx)
    warning('Unknown audio device name ''%s''\n',this.audioDeviceName);
    adidx = length(audioDeviceList);
end
set(this.guiHandles.popupAudioDevice,'Value',adidx);
popupAudioDevice_Callback;

    function toggleRecord_Callback
        if get(this.guiHandles.toggleRecord,'Value') == get(this.guiHandles.toggleRecord,'Max')
            this.record;
            set(this.guiHandles.toggleRecord,'String','Stop Recording');
            set(this.guiHandles.toggleRecord,'BackgroundColor',[0 1 0]);
        else
            set(this.guiHandles.toggleRecord,'String','Start Recording');
            set(this.guiHandles.toggleRecord,'BackgroundColor',[0.5 0.5 0.5]);
            this.stopRequested = true;
        end
    end % END function buttonStart_Callback

    function popupAudioDevice_Callback
        audioDeviceNames = get(this.guiHandles.popupAudioDevice,'String');
        which = get(this.guiHandles.popupAudioDevice,'Value');
        this.audioDeviceName = audioDeviceNames{which};
    end % END function popupAdaptor_Callback

    function popupVideoAdaptor_Callback
        adaptors = get(this.guiHandles.popupVideoAdaptor,'String');
        which = get(this.guiHandles.popupVideoAdaptor,'Value');
        deviceInfo = imaqhwinfo(adaptors{which});
        deviceNames = {deviceInfo.DeviceInfo.DeviceName};
        set(this.guiHandles.popupVideoDeviceID,'String',deviceNames);
        this.videoAdaptorName = adaptors{which};
    end % END function popupAdaptor_Callback

    function popupVideoDeviceID_Callback
        adaptors = get(this.guiHandles.popupVideoAdaptor,'String');
        whichAdaptor = get(this.guiHandles.popupVideoAdaptor,'Value');
        deviceInfo = imaqhwinfo(adaptors{whichAdaptor});
        deviceID = get(this.guiHandles.popupVideoDeviceID,'Value');
        formatList = deviceInfo.DeviceInfo(deviceID).SupportedFormats;
        set(this.guiHandles.popupVideoFormat,'String',formatList);
        this.videoDeviceID = deviceID;
    end % END function popupDeviceID_Callback

    function popupVideoFormat_Callback
        adaptors = get(this.guiHandles.popupVideoAdaptor,'String');
        whichAdaptor = get(this.guiHandles.popupVideoAdaptor,'Value');
        deviceInfo = imaqhwinfo(adaptors{whichAdaptor});
        deviceID = get(this.guiHandles.popupVideoDeviceID,'Value');
        formats = deviceInfo.DeviceInfo(deviceID).SupportedFormats;
        whichFormat = get(this.guiHandles.popupVideoFormat,'Value');
        this.videoFormat = formats{whichFormat};
    end % END function popupVideoFormat_Callback

    function editAudioSampleRate_Callback
        % check if an updated value has been entered
        newVal = str2double(get(this.guiHandles.editAudioSampleRate,'string'));
        if newVal == this.audioSampleRate
            set(this.guiHandles.buttonApplyAudioSampleRate,'enable','off')
        else
            if get(this.guiHandles.editAudioSampleRate,'Value')
                set(this.guiHandles.editAudioSampleRate,'Value',0)
                buttonApplyAudioSampleRate_Callback;
            else
                set(this.guiHandles.buttonApplyAudioSampleRate,'enable','on')
            end
        end
    end % END function editAudioSampleRate_Callback

    function editAudioSampleRate_KeypressFcn(evt)
        if strcmpi(evt.Key,'enter')||strcmpi(evt.Key,'return')
            set(this.guiHandles.editAudioSampleRate,'Value',1);
        end
    end % END function editAudioSampleRate_KeypressFcn

    function buttonApplyAudioSampleRate_Callback
        newVal = str2double(get(this.guiHandles.editAudioSampleRate,'string'));
        assert(isnumeric(newVal)&&isscalar(newVal)&&newVal>0&&newVal<50000,'Invalid sample rate (must be single scalar between 0 and 50KHz)');
        this.audioSampleRate = newVal;
        set(this.guiHandles.buttonApplyAudioSampleRate,'enable','off');
        this.hDebug.log(sprintf('Updated audio sample rate to %d',newVal),'info');
    end % END function buttonApplyAudioSampleRate_Callback

    function editVideoFrameRate_Callback
        % check if an updated value has been entered
        newVal = str2double(get(this.guiHandles.editVideoFrameRate,'string'));
        if newVal == this.videoFrameRate
            set(this.guiHandles.buttonApplyVideoFrameRate,'enable','off')
        else
            if get(this.guiHandles.editVideoFrameRate,'Value')
                set(this.guiHandles.editVideoFrameRate,'Value',0)
                buttonApplyVideoFrameRate_Callback;
            else
                set(this.guiHandles.buttonApplyVideoFrameRate,'enable','on')
            end
        end
    end % END function editVideoFrameRate_Callback

    function editVideoFrameRate_KeypressFcn(evt)
        if strcmpi(evt.Key,'enter')||strcmpi(evt.Key,'return')
            set(this.guiHandles.editVideoFrameRate,'Value',1);
        end
    end % END function editVideoFrameRate_KeypressFcn

    function buttonApplyVideoFrameRate_Callback
        newVal = str2double(get(this.guiHandles.editVideoFrameRate,'string'));
        assert(isnumeric(newVal)&&isscalar(newVal)&&newVal>0&&newVal<=120,'Invalid frame rate (must be single scalar in the range (0,120])');
        this.videoFrameRate = newVal;
        set(this.guiHandles.buttonApplyVideoFrameRate,'enable','off');
        this.hDebug.log(sprintf('Updated video frame rate to %d',newVal),'info');
    end % END function buttonApplyVideoFrameRate_Callback

    function toggleLiveUpdate_Callback
        if get(this.guiHandles.toggleLiveUpdate,'Value') == get(this.guiHandles.toggleLiveUpdate,'Max')
            this.videoLiveUpdate = true;
            set(this.guiHandles.toggleLiveUpdate,'BackgroundColor',[0 1 0]);
        else
            this.videoLiveUpdate = false;
            set(this.guiHandles.toggleLiveUpdate,'BackgroundColor',[0.5 0.5 0.5]);
        end
    end % END function toggleLiveUpdate_Callback

    function closeRequestFcn
        if this.isRecording
            this.stopRequested = true;
            this.deleteRequested = true;
        else
            delete(this);
            closereq;
        end
    end % END function closeRequestFcn

end % END function gui