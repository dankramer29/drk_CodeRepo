function [topic,props] = Feature        

topic = struct(...
    'name','Feature Properties',...
    'description','Properties related to features',...
    'id','ft');

props.outliers = struct(...
    'validationFcn',@(x)islogical(x)||(isnumeric(x)&&(x==1||x==0)),...
    'default',false,...
    'attributes',struct('Description','identify outlier observations (trials) in each feature'));

props.outlierparams = struct(...
    'validationFcn',@(x)isstruct(x)&&all(isfield(x,{'perfeat','global','perfeat_tile','perfeat_thresh','global_tile','global_thresh'})),...
    'default',struct('perfeat',true,'global',true,'perfeat_tile',[15 85],'perfeat_thresh',1.5,'global_tile',[1 99],'global_thresh',2),...
    'attributes',struct('Description',''));

props.prune = struct(...
    'validationFcn',@(x)islogical(x)||(isnumeric(x)&&(x==1||x==0)),...
    'default',false,...
    'attributes',struct('Description','evaluate features individually'));

props.prunemethod = struct(...
    'validationFcn',@(x)ischar(x)&&any(strcmpi(x,{'threshold','numfeats'})),...
    'default','numfeats',...
    'attributes',struct('Description','whether to prune based on a criterion or desired number of features ''threshold'',''numfeats'''));

props.prunegoal = struct(...
    'validationFcn',@isnumeric,...
    'default',25,...
    'attributes',struct('Description','depends on the method: for ''threshold'', defines threshold on misclassification rate for removing a feature; for ''numfeats'', defines number of features; if vector, defines [numfeats minimumfeats] (in cases where not enough valid features to meet requested number of features -- will generate warning instead of error and use what''s available)'));

props.modthresh = struct(...
    'validationFcn',@isnumeric,...
    'default',0.9,...
    'attributes',struct('Description','percentage of data that can be exact same value (no modulation) without killing the feature'));

props.reduce = struct(...
    'validationFcn',@(x)islogical(x)||(isnumeric(x)&&(x==1||x==0)),...
    'default',false,...
    'attributes',struct('Description','dimensionality reduction'));

props.reducemethod = struct(...
    'validationFcn',@(x)ischar(x)&&any(strcmpi(x,{'pca'})),...
    'default','pca',...
    'attributes',struct('Description',''));

props.reducezscore = struct(...
    'validationFcn',@(x)islogical(x)||(isnumeric(x)&&(x==1||x==0)),...
    'default',false,...
    'attributes',struct('Description','whether to z-score the features prior to reduction'));

props.crittol = struct(...
    'validationFcn',@isnumeric,...
    'default',0.05',...
    'attributes',struct('Description','allow values within minimum +/- this amount when minimizing criteria'));

props.maxfeatmethod = struct(...
    'validationFcn',@(x)ischar(x)&&any(strcmpi(x,{'featreduce','nfeats','inf'})),...
    'default','featreduce',...
    'attributes',struct('Description','what method to use for determining the number of features ''featreduce'',''nfeats'',''inf'''));

props.maxfeatthresh = struct(...
    'validationFcn',@isnumeric,...
    'default',0.8,...
    'attributes',struct('Description','threshold to use when determining number of features'));

props.maxfeats = struct(...
    'validationFcn',@isnumeric,...
    'default',inf,...
    'attributes',struct('Description','maximum number of features possible'));

props.crossval = struct(...
    'validationFcn',@(x)islogical(x)||(isnumeric(x)&&(x==1||x==0)),...
    'default',false,...
    'attributes',struct('Description','enable cross validation'));

props.cvtype = struct(...
    'validationFcn',@(x)ischar(x)&&any(strcmpi(x,{'kfold','holdout','leaveout','resubstitution'})),...
    'default','kfold',...
    'attributes',struct('Description','cross-validation type ''kfold'',''holdout'',''leaveout'',''resubstition'''));

props.cvbias = struct(...
    'validationFcn',@(x)ischar(x)&&any(strcmpi(x,{'mintest','mintrain','kfold','none'})),...
    'default','mintest',...
    'attributes',struct('Description','modify other parameters to satisfy the requested bias parameter ''mintest'',''mintrain'',''kfold'',''none'''));

props.cvarg = struct(...
    'validationFcn',@isnumeric,...
    'default',10,...
    'attributes',struct('Description','k-fold cross validation'));

props.mintest = struct(...
    'validationFcn',@isnumeric,...
    'default',5,...
    'attributes',struct('Description','minimum number of trials for a test set in cross-validation'));

props.mintrain = struct(...
    'validationFcn',@isnumeric,...
    'default',10,...
    'attributes',struct('Description','minimum number of trials for a training set in cross-validation'));

props.mcreps = struct(...
    'validationFcn',@isnumeric,...
    'default',50,...
    'attributes',struct('Description','number of Monte-Carlo repetitions for validation (see help crossval)'));

props.searchreps = struct(...
    'validationFcn',@isnumeric,...
    'default',50,...
    'attributes',struct('Description','number of times to repeat the sequential feature search'));

props.fittype = struct(...
    'validationFcn',@(x)ischar(x)&&exist(x,'file')==2,...
    'default','fitcdiscr',...
    'attributes',struct('Description','fit type (name of a constructor that returns a fit object)'));

props.fitargs = struct(...
    'validationFcn',@iscell,...
    'default',{{'DiscrimType','diagLinear','Prior','uniform','ScoreTransform','none'}},...
    'attributes',struct('Description','arguments to the fit object constructor'));

props.scoringquants = struct(...
    'validationFcn',@iscell,...
    'default',{{'mcr','added','dcrit','removed'}},...
    'attributes',struct('Description','which quantities to use when scoring features ''mcr'',''added'',''removed'',''dcrit'',''added_avg'',''added_min'',''removed_avg'',''removed_max'',''dcrit_avg'',''dcrit_min'''));

props.numftquants = struct(...
    'validationFcn',@iscell,...
    'default',{{'fwdfs','bwdfs','dcrit'}},...
    'attributes',struct('Description','which quantities to use when determining the number of features to keep ''fwdfs'',''bwdfs'',''dcrit'''));