function [topic,props] = Figure        

topic = struct(...
    'name','Figure Properties',...
    'description','Properties related to figure generation',...
    'id','fg');

props.opengl = struct(...
    'validationFcn',@ischar,...
    'default',env.get('opengl'),...
    'attributes',struct('Description','what style of opengl to use (hardware, hardwarebasic, software)'));

props.plot = struct(...
    'validationFcn',@(x)islogical(x)||(isnumeric(x)&&(x==1||x==0)),...
    'default',false,...
    'attributes',struct('Description','whether to generate figures'));

props.visible = struct(...
    'validationFcn',@(x)islogical(x)||(isnumeric(x)&&(x==1||x==0)),...
    'default',true,...
    'attributes',struct('Description','whether figures should be visible'));

props.save = struct(...
    'validationFcn',@(x)islogical(x)||(isnumeric(x)&&(x==1||x==0)),...
    'default',true,...
    'attributes',struct('Description','whether figures should be visible'));

props.overwrite = struct(...
    'validationFcn',@(x)islogical(x)||(isnumeric(x)&&(x==1||x==0)),...
    'default',false,...
    'attributes',struct('Description','whether to overwrite existing files'));

props.outdir = struct(...
    'validationFcn',@ischar,...
    'default','.',...
    'attributes',struct('Description','where to save results'));

props.colororder = struct(...
    'validationFcn',@(x)isnumeric(x)&&size(x,2)==3,...
    'default',[
    0         0.4470    0.7410
    0.8500    0.3250    0.0980
    0.9290    0.6940    0.1250
    0.4940    0.1840    0.5560
    0.4660    0.6740    0.1880
    0.3010    0.7450    0.9330
    0.6350    0.0780    0.1840],...
    'attributes',struct('Description','default color order for figures'));

props.markerorder = struct(...
    'validationFcn',@(x)iscell(x)&&all(ismember(x,{'+','o','*','.','x','s','d','^','v','>','<','p','h'})),...
    'default',{{'.','o','v'}},...
    'attributes',struct('Description','default order of markers for figures'));

props.backgroundcolor = struct(...
    'validationFcn',@(x)isnumeric(x)&&size(x,2)==3,...
    'default',[0.85 0.85 0.85],...
    'attributes',struct('Description','default color for background items'));

props.backgroundmarker = struct(...
    'validationFcn',@(x)ischar(x)&&ismember(x,{'+','o','*','.','x','s','d','^','v','>','<','p','h'}),...
    'default','.',...
    'attributes',struct('Description','default marker for background items'));

props.noisecolor = struct(...
    'validationFcn',@(x)isnumeric(x)&&size(x,2)==3,...
    'default',[0.3 0.3 0.3],...
    'attributes',struct('Description','default color for noise items'));

props.noisemarker = struct(...
    'validationFcn',@(x)ischar(x)&&ismember(x,{'+','o','*','.','x','s','d','^','v','>','<','p','h'}),...
    'default','x',...
    'attributes',struct('Description','default marker for noise items'));