#hessianfree 0.40 can be obtained with pip or from github
import hessianfree as hf
import scipy.io
import matplotlib.pyplot as plt
import numpy as np

#Input & Targets generated by MATLAB
dataDir = '/Users/frankwillett/Data/Derived/hfDataTmp'

#Create RNN that can generate avg control vector time series from "go" signal
rnnData = scipy.io.loadmat(dataDir + '/rnnData')

inputs = rnnData['inputs'].astype(np.float32)
targets = rnnData['targets'].astype(np.float32)
inputsVal = rnnData['inputsVal'].astype(np.float32)
targetsVal = rnnData['targetsVal'].astype(np.float32)
inputsFinal = rnnData['inputsFinal'].astype(np.float32)
targetsFinal = rnnData['targetsFinal'].astype(np.float32)

rnn = hf.RNNet([inputs.shape[2], 100, 2], layers=[hf.nl.Linear(), hf.nl.Logistic(), hf.nl.Linear()])
rnn.run_epochs(inputs, targets,
                optimizer=hf.opt.HessianFree(CG_iter=100),
                max_epochs=300, plotting=True, test=(inputsVal, targetsVal), print_period=1)
                
rnn.W = rnn.best_W.copy()
outputs = rnn.forward(inputs)
outputsVal = rnn.forward(inputsVal)
outputsFinal = rnn.forward(inputsFinal)

a = {}
a['outputs']=outputs[-1]
a['outputsVal']=outputsVal[-1]
a['outputsFinal']=outputsFinal[-1]

scipy.io.savemat('/Users/frankwillett/Data/Derived/hfDataTmp/rnnResults',a)

# tmp = outputsFinal[-1]
# plt.figure()
# plt.plot(targetsFinal[64, :, 1],color='b')
# plt.plot(tmp[64, :, 1],color='r')
# plt.show()
